{"version":3,"file":"modal_add_new_declaration.min.js","sources":["../src/modal_add_new_declaration.js"],"sourcesContent":["define(['jquery', 'core/notification', 'core/custom_interaction_events', 'core/modal', 'core/modal_registry', 'core/modal_events'],\n    function ($, Notification, CustomEvents, Modal, ModalRegistry, ModalEvents) {\n\n        var registered = false;\n        var SELECTORS = {\n            ADD_BUTTON: '[data-action=\"add\"]',\n            CANCEL_BUTTON: '[data-action=\"cancel\"]',\n        };\n\n        /**\n         * Constructor for the Modal.\n         *\n         * @param {object} root The root jQuery element for the modal\n         */\n        var ModalAddDeclaration = function (root) {\n            Modal.call(this, root);\n\n            if (!this.getFooter().find(SELECTORS.ADD_BUTTON).length) {\n                Notification.exception({\n                    message: 'No add button found'\n                });\n            }\n\n            if (!this.getFooter().find(SELECTORS.CANCEL_BUTTON).length) {\n                Notification.exception({\n                    message: 'No cancel button found'\n                });\n            }\n        };\n\n        ModalAddDeclaration.TYPE = 'assignsubmission_declaration-adddeclaration';\n        ModalAddDeclaration.prototype = Object.create(Modal.prototype);\n        ModalAddDeclaration.prototype.constructor = ModalAddDeclaration;\n\n        /**\n         * Set up all of the event handling for the modal.\n         *\n         * @method registerEventListeners\n         */\n        ModalAddDeclaration.prototype.registerEventListeners = function () {\n            // Apply parent event listeners.\n            Modal.prototype.registerEventListeners.call(this);\n\n            this.getModal().on(CustomEvents.events.activate, SELECTORS.ADD_BUTTON, function (e, data) {\n                // Add your logic for when the login button is clicked.\n\n                let match = Array.from(document.querySelectorAll('[id^=id_assignsubmission_declaration_]')); // Get the ids that start with this string\n                const currentIds = match.filter(id => { // The format of the ids is id_assignsubmission_declaration_1. This returns an array of elements\n                    if (id.getAttribute('id').match(/(\\d+)\\D*$/)) return id;\n                });\n\n                let lastNumber = (currentIds[currentIds.length - 2]).getAttribute('id'); // We get the textarea and checkbox id, the textarea is easier to work with.\n                lastNumber = lastNumber.split('_');\n                lastNumber = lastNumber.filter(val => {\n                    if (!isNaN(val)) return val;\n                });\n                const newID = parseInt(lastNumber[lastNumber.length - 1]) + 1;\n\n                const newDec = {\n                    declaration_title: document.getElementById('inputTitle').value,\n                    declaration_text: document.getElementById('inputContent').value,\n                    id: newID,\n                    assignment: document.getElementById('id_declarationjson').getAttribute('assignmentid'),\n                    selected: 0\n                };\n\n                document.getElementById('inputTitle').classList.remove('input-error');\n                document.getElementById('inputContent').classList.remove('input-error');\n\n                if (newDec.declaration_title == '') {\n                    document.getElementById('inputTitle').classList.add('input-error');\n                    return;\n                }\n\n                if (newDec.declaration_text == '') {\n                    document.getElementById('inputContent').classList.add('input-error');\n                    return;\n                }\n\n                const declaration = document.getElementById('fgroup_id_assignsubmission_declaration_group');\n                const declarationSubmissionContainer = document.getElementById('id_submissiontypescontainer');\n                const btnContainer = document.querySelector('.add-new-declaration-container');\n                let newDeclaration = declaration.cloneNode(true);\n                newDeclaration.removeAttribute('id');\n\n                Array.from(newDeclaration.children).forEach((child, index) => {\n\n                    const oldID = child.children[index].getAttribute('id');\n                    if (index == 0) {\n                        child.children[index].setAttribute('id', `${oldID}_${newDec.declaration_title} `);\n                        child.children[index].innerHTML = newDec.declaration_title;\n                    } else {\n\n                        Array.from(child.children).forEach((child, index) => {\n                            if (index == 0) {\n\n\n                                Array.from(child.children).forEach((child, index) => {\n                                    if (index == 0) {\n                                        child.innerHTML = newDec.declaration_title; //Legend\n                                    } else {\n\n                                        Array.from(child.children).forEach((child, index) => {\n                                            if (index == 0) {\n                                                child.setAttribute('for', `id_assignsubmission_declaration_${newDec.id}`);\n                                            } else if (index == 1) { // Textarea.\n                                                child.innerHTML = newDec.declaration_text;\n\n                                                child.removeAttribute('placeholder');\n                                                child.setAttribute('value', newDec.declaration_text);\n                                                child.setAttribute('id', `id_assignsubmission_declaration_${newDec.id}`)\n                                                child.setAttribute('name', `assignsubmission_declaration_${newDec.id}`)\n\n                                            } else if (index == 2) { // Checkbox.\n\n                                                Array.from(child.children).forEach((child, index) => {\n                                                    console.log(\"CHECKBOX\");\n                                                    console.log(child);\n                                                    child.value = 0;\n                                                    child.removeAttribute('checked');\n                                                    child.setAttribute('id', `id_assignsubmission_declaration_${newDec.id}_check`);\n                                                    child.setAttribute('name', `assignsubmission_declaration_${newDec.id}_check`);\n                                                    child.addEventListener('change', function (e) {\n                                                        if (e.target.checked) {\n                                                            let declaration = JSON.parse(document.getElementById('id_declarationjson').value);\n                                                            declaration.forEach(decl => {\n                                                                if (decl.id == newDec.id) {\n                                                                    decl.selected = 1;\n                                                                }\n                                                            }, newDeclaration);\n\n                                                            document.getElementById('id_declarationjson').value = JSON.stringify(declaration);\n                                                        }\n                                                    })\n                                                })\n\n                                            } else {\n                                                child.setAttribute('id', `id_assignsubmission_declaration_${newDec.id}_check`);\n                                            }\n                                        })\n                                    }\n                                });\n\n                            }\n\n                        });\n                    }\n                    this.destroy(); // Remove the modal.\n                }, newDec);\n\n                // Add the descriptor to the json\n                let decl = JSON.parse(document.getElementById('id_declarationjson').value);\n                decl.push(newDec);\n                document.getElementById('id_declarationjson').value = JSON.stringify(decl);\n                declarationSubmissionContainer.insertBefore(newDeclaration, btnContainer)\n\n\n            }.bind(this));\n\n            this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function (e, data) {\n                // Add your logic for when the cancel button is clicked.\n                this.destroy();\n\n            }.bind(this));\n        };\n\n        // Automatically register with the modal registry the first time this module is imported so that you can create modals\n        // of this type using the modal factory.\n        if (!registered) {\n            ModalRegistry.register(ModalAddDeclaration.TYPE, ModalAddDeclaration, 'assignsubmission_declaration/assignsubmission_declaration_modal');\n            registered = true;\n        }\n\n        return ModalAddDeclaration;\n    });"],"names":["define","$","Notification","CustomEvents","Modal","ModalRegistry","ModalEvents","registered","SELECTORS","ModalAddDeclaration","root","call","this","getFooter","find","length","exception","message","TYPE","prototype","Object","create","constructor","registerEventListeners","getModal","on","events","activate","e","data","currentIds","Array","from","document","querySelectorAll","filter","id","getAttribute","match","lastNumber","split","val","isNaN","newID","parseInt","newDec","declaration_title","getElementById","value","declaration_text","assignment","selected","classList","remove","declaration","declarationSubmissionContainer","btnContainer","querySelector","newDeclaration","cloneNode","removeAttribute","children","forEach","child","index","oldID","setAttribute","innerHTML","console","log","addEventListener","target","checked","JSON","parse","decl","stringify","_this","destroy","push","insertBefore","add","bind","register"],"mappings":"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"}